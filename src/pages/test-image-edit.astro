---
title: '图像编辑功能测试';
description: '测试重构后的图像编辑核心功能';
import ImageEditDemo from '@/components/ImageEditDemo.astro';
---

<html lang="zh-CN">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>图像编辑功能测试</title>
  </head>
  <body>
    <div class="container">
      <h1>图像编辑功能测试</h1>
      <p>
        这个页面用于测试重构后的图像编辑核心功能，包括MCP工具和Astro Actions。
      </p>

      <div class="test-section">
        <h2>1. 通用图像编辑演示组件</h2>
        <p>测试Astro Actions的调用：</p>

        <ImageEditDemo />
      </div>

      <div class="test-section">
        <h2>2. 功能配置查询</h2>
        <p>测试获取功能配置的Action：</p>

        <button id="getFunctionConfig">获取整体风格化功能配置</button>
        <div id="functionConfigResult"></div>
      </div>

      <div class="test-section">
        <h2>3. 所有功能列表</h2>
        <p>测试获取所有功能类型的Action：</p>

        <button id="getAllFunctions">获取所有功能类型</button>
        <div id="allFunctionsResult"></div>
      </div>
    </div>

    <script>
      import { actions } from 'astro:actions';

      // 测试获取功能配置
      document
        .getElementById('getFunctionConfig')
        ?.addEventListener('click', async () => {
          const resultArea = document.getElementById('functionConfigResult');
          if (!resultArea) return;

          resultArea.innerHTML = '<p>查询中...</p>';

          try {
            const { data, error } =
              await actions.getImageEditFunctionConfigAction({
                function: 'stylization_all',
              });

            if (error) {
              resultArea.innerHTML = `<div class="error">查询失败: ${error.message}</div>`;
              return;
            }

            if (data) {
              const result = data as any;
              if (result.success) {
                const config = result.config;
                resultArea.innerHTML = `
                            <div class="success">
                                <h4>功能配置查询成功</h4>
                                <p><strong>功能名称:</strong> ${config.name}</p>
                                <p><strong>功能描述:</strong> ${config.description}</p>
                                <p><strong>需要蒙版:</strong> ${config.needsMask ? '是' : '否'}</p>
                                <p><strong>需要扩展参数:</strong> ${config.needsExpand ? '是' : '否'}</p>
                                <p><strong>需要超分参数:</strong> ${config.needsUpscale ? '是' : '否'}</p>
                            </div>
                        `;
              } else {
                resultArea.innerHTML = `<div class="error">查询失败: ${result.message}</div>`;
              }
            }
          } catch (error) {
            const errorMessage =
              error instanceof Error ? error.message : '未知错误';
            resultArea.innerHTML = `<div class="error">查询出错: ${errorMessage}</div>`;
          }
        });

      // 测试获取所有功能类型
      document
        .getElementById('getAllFunctions')
        ?.addEventListener('click', async () => {
          const resultArea = document.getElementById('allFunctionsResult');
          if (!resultArea) return;

          resultArea.innerHTML = '<p>查询中...</p>';

          try {
            const { data, error } =
              await actions.getAllImageEditFunctionsAction({});

            if (error) {
              resultArea.innerHTML = `<div class="error">查询失败: ${error.message}</div>`;
              return;
            }

            if (data) {
              const result = data as any;
              if (result.success) {
                const functions = result.functions || [];
                const functionsHtml = functions
                  .map(
                    (func: any) => `
                            <div class="function-item">
                                <h4>${func.name}</h4>
                                <p><strong>功能类型:</strong> ${func.function}</p>
                                <p><strong>描述:</strong> ${func.description}</p>
                                <p><strong>参数需求:</strong> 
                                    ${func.needsMask ? '蒙版 ' : ''}
                                    ${func.needsExpand ? '扩展参数 ' : ''}
                                    ${func.needsUpscale ? '超分参数 ' : ''}
                                    ${!func.needsMask && !func.needsExpand && !func.needsUpscale ? '无特殊参数' : ''}
                                </p>
                            </div>
                        `
                  )
                  .join('');

                resultArea.innerHTML = `
                            <div class="success">
                                <h4>功能列表查询成功 (共${functions.length}个功能)</h4>
                                <div class="functions-list">
                                    ${functionsHtml}
                                </div>
                            </div>
                        `;
              } else {
                resultArea.innerHTML = `<div class="error">查询失败: ${result.message}</div>`;
              }
            }
          } catch (error) {
            const errorMessage =
              error instanceof Error ? error.message : '未知错误';
            resultArea.innerHTML = `<div class="error">查询出错: ${errorMessage}</div>`;
          }
        });
    </script>

    <style>
      .container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 20px;
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto,
          sans-serif;
      }

      .test-section {
        margin-bottom: 40px;
        padding: 20px;
        border: 1px solid #e0e0e0;
        border-radius: 8px;
        background: #f9f9f9;
      }

      .test-section h2 {
        color: #333;
        margin-top: 0;
      }

      button {
        background: #007bff;
        color: white;
        border: none;
        padding: 10px 20px;
        border-radius: 4px;
        cursor: pointer;
        font-size: 14px;
        margin-bottom: 15px;
      }

      button:hover {
        background: #0056b3;
      }

      .success {
        background: #d4edda;
        color: #155724;
        padding: 15px;
        border-radius: 4px;
        border: 1px solid #c3e6cb;
      }

      .error {
        background: #f8d7da;
        color: #721c24;
        padding: 15px;
        border-radius: 4px;
        border: 1px solid #f5c6cb;
      }

      .function-item {
        background: white;
        padding: 15px;
        margin: 10px 0;
        border-radius: 4px;
        border: 1px solid #ddd;
      }

      .function-item h4 {
        margin-top: 0;
        color: #007bff;
      }

      .functions-list {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
        gap: 15px;
      }
    </style>
  </body>
</html>
